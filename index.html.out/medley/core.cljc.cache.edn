{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{uuid random-uuid boolean? ex-cause ex-message uuid?}, :name medley.core, :imports nil, :requires nil, :uses nil, :defs {uuid {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 317, :column 7, :end-line 317, :end-column 11, :arglists (quote ([s])), :doc "Returns a UUID generated from the supplied string. Same as `cljs.core/uuid`\n  in ClojureScript, while in Clojure it returns a `java.util.UUID` object."}, :name medley.core/uuid, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 11, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 317, :end-line 317, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns a UUID generated from the supplied string. Same as `cljs.core/uuid`\n  in ClojureScript, while in Clojure it returns a `java.util.UUID` object."}, dissoc-in {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 20, :column 7, :end-line 20, :end-column 16, :arglists (quote ([m ks])), :doc "Dissociate a value in a nested assocative structure, identified by a sequence\n  of keys. Any collections left empty by the operation will be dissociated from\n  their containing structures."}, :name medley.core/dissoc-in, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 16, :method-params ([m ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ks])), :doc "Dissociate a value in a nested assocative structure, identified by a sequence\n  of keys. Any collections left empty by the operation will be dissociated from\n  their containing structures."}, drop-upto {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 238, :column 7, :end-line 238, :end-column 16, :arglists (quote ([pred] [pred coll])), :doc "Returns a lazy sequence of the items in coll starting *after* the first item\n  for which `(pred item)` returns true.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pred] [pred coll]), :arglists ([pred] [pred coll]), :arglists-meta (nil nil)}}, :name medley.core/drop-upto, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pred] [pred coll]), :arglists ([pred] [pred coll]), :arglists-meta (nil nil)}, :method-params ([pred] [pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 238, :end-line 238, :max-fixed-arity 2, :fn-var true, :arglists ([pred] [pred coll]), :doc "Returns a lazy sequence of the items in coll starting *after* the first item\n  for which `(pred item)` returns true."}, random-uuid {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 324, :column 7, :end-line 324, :end-column 18, :arglists (quote ([])), :doc "Generates a new random UUID. Same as `cljs.core/random-uuid` except it works\n  for Clojure as well as ClojureScript."}, :name medley.core/random-uuid, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 324, :end-line 324, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Generates a new random UUID. Same as `cljs.core/random-uuid` except it works\n  for Clojure as well as ClojureScript."}, greatest {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 137, :column 7, :end-line 137, :end-column 15, :arglists (quote ([& xs])), :doc "Find the greatest argument (as defined by the compare function) in O(n) time.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [a] [a b]), :arglists ([] [a] [a b] [a b & more]), :arglists-meta (nil nil nil nil)}}, :name medley.core/greatest, :variadic true, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [a] [a b]), :arglists ([] [a] [a b] [a b & more]), :arglists-meta (nil nil nil nil)}, :method-params ([] [a] [a b]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 2, :fn-var true, :arglists ([] [a] [a b] [a b & more]), :doc "Find the greatest argument (as defined by the compare function) in O(n) time."}, boolean? {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 123, :column 7, :end-line 123, :end-column 15, :arglists (quote ([x])), :doc "Returns true if x is a boolean."}, :name medley.core/boolean?, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a boolean."}, distinct-by {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 173, :column 7, :end-line 173, :end-column 18, :arglists (quote ([f] [f coll])), :doc "Returns a lazy sequence of the elements of coll, removing any elements that\n  return duplicate values when passed to a function f.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f coll]), :arglists ([f] [f coll]), :arglists-meta (nil nil)}}, :name medley.core/distinct-by, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f coll]), :arglists ([f] [f coll]), :arglists-meta (nil nil)}, :method-params ([f] [f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 2, :fn-var true, :arglists ([f] [f coll]), :doc "Returns a lazy sequence of the elements of coll, removing any elements that\n  return duplicate values when passed to a function f."}, indexed {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 254, :column 7, :end-line 254, :end-column 14, :arglists (quote ([] [coll])), :doc "Returns an ordered, lazy sequence of vectors `[index item]`, where item is a\n  value in coll, and index its position starting from zero.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [coll]), :arglists ([] [coll]), :arglists-meta (nil nil)}}, :name medley.core/indexed, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [coll]), :arglists ([] [coll]), :arglists-meta (nil nil)}, :method-params ([] [coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 254, :end-line 254, :max-fixed-arity 1, :fn-var true, :arglists ([] [coll]), :doc "Returns an ordered, lazy sequence of vectors `[index item]`, where item is a\n  value in coll, and index its position starting from zero."}, remove-kv {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 93, :column 7, :end-line 93, :end-column 16, :arglists (quote ([pred coll])), :doc "Returns a new associative collection of the items in coll for which\n  `(pred (key item) (val item))` returns false."}, :name medley.core/remove-kv, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 16, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll])), :doc "Returns a new associative collection of the items in coll for which\n  `(pred (key item) (val item))` returns false."}, find-first {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 6, :column 7, :end-line 6, :end-column 17, :arglists (quote ([pred] [pred coll])), :doc "Finds the first item in a collection that matches a predicate.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pred] [pred coll]), :arglists ([pred] [pred coll]), :arglists-meta (nil nil)}}, :name medley.core/find-first, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pred] [pred coll]), :arglists ([pred] [pred coll]), :arglists-meta (nil nil)}, :method-params ([pred] [pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists ([pred] [pred coll]), :doc "Finds the first item in a collection that matches a predicate."}, filter-vals {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 87, :column 7, :end-line 87, :end-column 18, :arglists (quote ([pred coll])), :doc "Returns a new associative collection of the items in coll for which\n  `(pred (val item))` returns true."}, :name medley.core/filter-vals, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 18, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll])), :doc "Returns a new associative collection of the items in coll for which\n  `(pred (val item))` returns true."}, deref-swap! {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 273, :column 7, :end-line 273, :end-column 18, :arglists (quote ([atom f & args])), :doc "Atomically swaps the value of the atom to be `(apply f x args)`, where x is\n  the current value of the atom, then returns the original value of the atom.\n  This function therefore acts like an atomic `deref` then `swap!`.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([atom f]), :arglists ([atom f] [atom f & args]), :arglists-meta (nil nil)}}, :name medley.core/deref-swap!, :variadic true, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([atom f]), :arglists ([atom f] [atom f & args]), :arglists-meta (nil nil)}, :method-params ([atom f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 273, :end-line 273, :max-fixed-arity 2, :fn-var true, :arglists ([atom f] [atom f & args]), :doc "Atomically swaps the value of the atom to be `(apply f x args)`, where x is\n  the current value of the atom, then returns the original value of the atom.\n  This function therefore acts like an atomic `deref` then `swap!`."}, mapply {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 145, :column 7, :end-line 145, :end-column 13, :arglists (quote ([f & args])), :doc "Applies a function f to the argument list formed by concatenating\n  everything but the last element of args with the last element of\n  args. This is useful for applying a function that accepts keyword\n  arguments to a map.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([f m]), :arglists ([f m] [f a & args]), :arglists-meta (nil nil)}}, :name medley.core/mapply, :variadic true, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([f m]), :arglists ([f m] [f a & args]), :arglists-meta (nil nil)}, :method-params ([f m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 2, :fn-var true, :arglists ([f m] [f a & args]), :doc "Applies a function f to the argument list formed by concatenating\n  everything but the last element of args with the last element of\n  args. This is useful for applying a function that accepts keyword\n  arguments to a map."}, queue {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 111, :column 7, :end-line 111, :end-column 12, :arglists (quote ([] [coll])), :doc "Creates an empty persistent queue, or one populated with a collection.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [coll]), :arglists ([] [coll]), :arglists-meta (nil nil)}}, :name medley.core/queue, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [coll]), :arglists ([] [coll]), :arglists-meta (nil nil)}, :method-params ([] [coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists ([] [coll]), :doc "Creates an empty persistent queue, or one populated with a collection."}, remove-vals {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 105, :column 7, :end-line 105, :end-column 18, :arglists (quote ([pred coll])), :doc "Returns a new associative collection of the items in coll for which\n  `(pred (val item))` returns false."}, :name medley.core/remove-vals, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 18, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll])), :doc "Returns a new associative collection of the items in coll for which\n  `(pred (val item))` returns false."}, ex-cause {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 304, :column 7, :end-line 304, :end-column 15, :arglists (quote ([ex])), :doc "Returns the cause attached to the given ExceptionInfo/Throwable object. For\n  all other types returns nil. Same as `cljs.core/ex-clause` except it works for\n  Clojure as well as ClojureScript."}, :name medley.core/ex-cause, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 15, :method-params ([ex]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 304, :end-line 304, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ex])), :doc "Returns the cause attached to the given ExceptionInfo/Throwable object. For\n  all other types returns nil. Same as `cljs.core/ex-clause` except it works for\n  Clojure as well as ClojureScript."}, ex-message {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 296, :column 7, :end-line 296, :end-column 17, :arglists (quote ([ex])), :doc "Returns the message attached to the given Error/Throwable object. For all\n  other types returns nil. Same as `cljs.core/ex-message` except it works for\n  Clojure as well as ClojureScript."}, :name medley.core/ex-message, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 17, :method-params ([ex]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 296, :end-line 296, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ex])), :doc "Returns the message attached to the given Error/Throwable object. For all\n  other types returns nil. Same as `cljs.core/ex-message` except it works for\n  Clojure as well as ClojureScript."}, dedupe-by {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 200, :column 7, :end-line 200, :end-column 16, :arglists (quote ([f] [f coll])), :doc "Returns a lazy sequence of the elements of coll, removing any **consecutive**\n  elements that return duplicate values when passed to a function f.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f coll]), :arglists ([f] [f coll]), :arglists-meta (nil nil)}}, :name medley.core/dedupe-by, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f coll]), :arglists ([f] [f coll]), :arglists-meta (nil nil)}, :method-params ([f] [f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 2, :fn-var true, :arglists ([f] [f coll]), :doc "Returns a lazy sequence of the elements of coll, removing any **consecutive**\n  elements that return duplicate values when passed to a function f."}, deref-reset! {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 290, :column 7, :end-line 290, :end-column 19, :arglists (quote ([atom newval])), :doc "Sets the value of the atom without regard for the current value, then returns\n  the original value of the atom. See also: [[deref-swap!]]."}, :name medley.core/deref-reset!, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 19, :method-params ([atom newval]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 290, :end-line 290, :max-fixed-arity 2, :fn-var true, :arglists (quote ([atom newval])), :doc "Sets the value of the atom without regard for the current value, then returns\n  the original value of the atom. See also: [[deref-swap!]]."}, map-keys {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 65, :column 7, :end-line 65, :end-column 15, :arglists (quote ([f coll])), :doc "Maps a function over the keys of an associative collection."}, :name medley.core/map-keys, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 15, :method-params ([f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f coll])), :doc "Maps a function over the keys of an associative collection."}, editable? {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 43, :column 8, :end-line 43, :end-column 17, :private true, :arglists (quote ([coll]))}, :private true, :name medley.core/editable?, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 17, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll]))}, interleave-all {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 154, :column 7, :end-line 154, :end-column 21, :arglists (quote ([& colls])), :doc "Returns a lazy seq of the first item in each coll, then the second, etc.\n  Unlike `clojure.core/interleave`, the returned seq contains all items in the\n  supplied collections, even if the collections are different sizes.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [c1] [c1 c2]), :arglists ([] [c1] [c1 c2] [c1 c2 & colls]), :arglists-meta (nil nil nil nil)}}, :name medley.core/interleave-all, :variadic true, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [c1] [c1 c2]), :arglists ([] [c1] [c1 c2] [c1 c2 & colls]), :arglists-meta (nil nil nil nil)}, :method-params ([] [c1] [c1 c2]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 2, :fn-var true, :arglists ([] [c1] [c1 c2] [c1 c2 & colls]), :doc "Returns a lazy seq of the first item in each coll, then the second, etc.\n  Unlike `clojure.core/interleave`, the returned seq contains all items in the\n  supplied collections, even if the collections are different sizes."}, remove-keys {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 99, :column 7, :end-line 99, :end-column 18, :arglists (quote ([pred coll])), :doc "Returns a new associative collection of the items in coll for which\n  `(pred (key item))` returns false."}, :name medley.core/remove-keys, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 18, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll])), :doc "Returns a new associative collection of the items in coll for which\n  `(pred (key item))` returns false."}, take-upto {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 219, :column 7, :end-line 219, :end-column 16, :arglists (quote ([pred] [pred coll])), :doc "Returns a lazy sequence of successive items from coll up to and including\n  the first item for which `(pred item)` returns true.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pred] [pred coll]), :arglists ([pred] [pred coll]), :arglists-meta (nil nil)}}, :name medley.core/take-upto, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pred] [pred coll]), :arglists ([pred] [pred coll]), :arglists-meta (nil nil)}, :method-params ([pred] [pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 2, :fn-var true, :arglists ([pred] [pred coll]), :doc "Returns a lazy sequence of successive items from coll up to and including\n  the first item for which `(pred item)` returns true."}, filter-keys {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 81, :column 7, :end-line 81, :end-column 18, :arglists (quote ([pred coll])), :doc "Returns a new associative collection of the items in coll for which\n  `(pred (key item))` returns true."}, :name medley.core/filter-keys, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 18, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll])), :doc "Returns a new associative collection of the items in coll for which\n  `(pred (key item))` returns true."}, queue? {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 117, :column 7, :end-line 117, :end-column 13, :arglists (quote ([x])), :doc "Returns true if x implements clojure.lang.PersistentQueue."}, :name medley.core/queue?, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x implements clojure.lang.PersistentQueue."}, map-kv {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 58, :column 7, :end-line 58, :end-column 13, :arglists (quote ([f coll])), :doc "Maps a function over the key/value pairs of an associate collection. Expects\n  a function that takes two arguments, the key and value, and returns the new\n  key and value as a collection of two elements."}, :name medley.core/map-kv, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 13, :method-params ([f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f coll])), :doc "Maps a function over the key/value pairs of an associate collection. Expects\n  a function that takes two arguments, the key and value, and returns the new\n  key and value as a collection of two elements."}, least {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 129, :column 7, :end-line 129, :end-column 12, :arglists (quote ([& xs])), :doc "Return the least argument (as defined by the compare function) in O(n) time.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [a] [a b]), :arglists ([] [a] [a b] [a b & more]), :arglists-meta (nil nil nil nil)}}, :name medley.core/least, :variadic true, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [a] [a b]), :arglists ([] [a] [a b] [a b & more]), :arglists-meta (nil nil nil nil)}, :method-params ([] [a] [a b]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 2, :fn-var true, :arglists ([] [a] [a b] [a b & more]), :doc "Return the least argument (as defined by the compare function) in O(n) time."}, reduce-map {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 47, :column 8, :end-line 47, :end-column 18, :private true, :arglists (quote ([f coll]))}, :private true, :name medley.core/reduce-map, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 18, :method-params ([f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f coll]))}, uuid? {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 312, :column 7, :end-line 312, :end-column 12, :arglists (quote ([x])), :doc "Returns true if the value is a UUID."}, :name medley.core/uuid?, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 312, :end-line 312, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if the value is a UUID."}, abs {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 268, :column 7, :end-line 268, :end-column 10, :arglists (quote ([x])), :doc "Returns the absolute value of a number."}, :name medley.core/abs, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 268, :end-line 268, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns the absolute value of a number."}, map-vals {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 70, :column 7, :end-line 70, :end-column 15, :arglists (quote ([f coll])), :doc "Maps a function over the values of an associative collection."}, :name medley.core/map-vals, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 15, :method-params ([f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f coll])), :doc "Maps a function over the values of an associative collection."}, assoc-some {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 34, :column 7, :end-line 34, :end-column 17, :arglists (quote ([m k v] [m k v & kvs])), :doc "Associates a key with a value in a map, if and only if the value is not nil.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([m k v]), :arglists ([m k v] [m k v & kvs]), :arglists-meta (nil nil)}}, :name medley.core/assoc-some, :variadic true, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([m k v]), :arglists ([m k v] [m k v & kvs]), :arglists-meta (nil nil)}, :method-params ([m k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 3, :fn-var true, :arglists ([m k v] [m k v & kvs]), :doc "Associates a key with a value in a map, if and only if the value is not nil."}, map-entry {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 52, :column 7, :end-line 52, :end-column 16, :arglists (quote ([k v])), :doc "Create a map entry for a key and value pair."}, :name medley.core/map-entry, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 16, :method-params ([k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k v])), :doc "Create a map entry for a key and value pair."}, filter-kv {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :line 75, :column 7, :end-line 75, :end-column 16, :arglists (quote ([pred coll])), :doc "Returns a new associative collection of the items in coll for which\n  `(pred (key item) (val item))` returns true."}, :name medley.core/filter-kv, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/2cx/9txbbm/index.html.out/medley/core.cljc", :end-column 16, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll])), :doc "Returns a new associative collection of the items in coll for which\n  `(pred (key item) (val item))` returns true."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:medley.core/none}, :order [:medley.core/none]}, :doc "A small collection of useful, mostly pure functions that might not look out\n  of place in the clojure.core namespace."}