{:rename-macros {}, :renames {}, :externs {Math {cos {}, sin {}, abs {}}, Error {}}, :use-macros {are cljs.test, is cljs.test, deftest cljs.test}, :excludes #{}, :name wheel.math.geometry, :imports nil, :requires {wheel.math.number wheel.math.number, cljs.test cljs.test}, :uses nil, :defs {cos {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1j9l/9txbbm/index.html.out/wheel/math/geometry.cljc", :line 7, :column 7, :end-line 7, :end-column 10, :arglists (quote ([radians]))}, :name wheel.math.geometry/cos, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1j9l/9txbbm/index.html.out/wheel/math/geometry.cljc", :end-column 10, :method-params ([radians]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([radians]))}, sin {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1j9l/9txbbm/index.html.out/wheel/math/geometry.cljc", :line 11, :column 7, :end-line 11, :end-column 10, :arglists (quote ([radians]))}, :name wheel.math.geometry/sin, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1j9l/9txbbm/index.html.out/wheel/math/geometry.cljc", :end-column 10, :method-params ([radians]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([radians]))}, abs {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1j9l/9txbbm/index.html.out/wheel/math/geometry.cljc", :line 15, :column 7, :end-line 15, :end-column 10, :arglists (quote ([n]))}, :name wheel.math.geometry/abs, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1j9l/9txbbm/index.html.out/wheel/math/geometry.cljc", :end-column 10, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, polar->cartesian {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1j9l/9txbbm/index.html.out/wheel/math/geometry.cljc", :line 19, :column 7, :end-line 19, :end-column 23, :arglists (quote ([radius radians])), :doc "Given a radius (unitless) and rotation in radians, returns (unitless) [x y] co-ordinates"}, :name wheel.math.geometry/polar->cartesian, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1j9l/9txbbm/index.html.out/wheel/math/geometry.cljc", :end-column 23, :method-params ([radius radians]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([radius radians])), :doc "Given a radius (unitless) and rotation in radians, returns (unitless) [x y] co-ordinates"}, degrees->radians {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1j9l/9txbbm/index.html.out/wheel/math/geometry.cljc", :line 27, :column 7, :end-line 27, :end-column 23, :arglists (quote ([degrees])), :doc "Given a rotation in degrees, returns the same rotation in radians"}, :name wheel.math.geometry/degrees->radians, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1j9l/9txbbm/index.html.out/wheel/math/geometry.cljc", :end-column 23, :method-params ([degrees]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([degrees])), :doc "Given a rotation in degrees, returns the same rotation in radians"}, radians->degrees {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1j9l/9txbbm/index.html.out/wheel/math/geometry.cljc", :line 32, :column 7, :end-line 32, :end-column 23, :arglists (quote ([radians])), :doc "Given a rotation in radians, returns the same rotation in degrees"}, :name wheel.math.geometry/radians->degrees, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1j9l/9txbbm/index.html.out/wheel/math/geometry.cljc", :end-column 23, :method-params ([radians]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([radians])), :doc "Given a rotation in radians, returns the same rotation in degrees"}, ??polar->cartesian {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1j9l/9txbbm/index.html.out/wheel/math/geometry.cljc", :line 39, :column 10, :end-line 39, :end-column 28}, :name wheel.math.geometry/??polar->cartesian, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1j9l/9txbbm/index.html.out/wheel/math/geometry.cljc", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 39, :end-line 39, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, ??degrees->radians {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1j9l/9txbbm/index.html.out/wheel/math/geometry.cljc", :line 72, :column 10, :end-line 72, :end-column 28}, :name wheel.math.geometry/??degrees->radians, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1j9l/9txbbm/index.html.out/wheel/math/geometry.cljc", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 72, :end-line 72, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, ??radians->degrees {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1j9l/9txbbm/index.html.out/wheel/math/geometry.cljc", :line 88, :column 10, :end-line 88, :end-column 28}, :name wheel.math.geometry/??radians->degrees, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1j9l/9txbbm/index.html.out/wheel/math/geometry.cljc", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 88, :end-line 88, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}}, :require-macros {cljs.test cljs.test}, :cljs.analyzer/constants {:seen #{x ??polar->cartesian wheel.math.geometry/??radians->degrees ??degrees->radians = radians degrees y pi :ns :name * :file :end-column cos :type wheel.math.number/pi :column xo - :fail polar->cartesian :line not within-tolerance? radius :expected / angle :end-line :error :pass :arglists radians->degrees :actual :doc == degrees->radians wheel.math.geometry/??polar->cartesian sin yo :test ??radians->degrees :message wheel.math.geometry wheel.math.geometry/??degrees->radians}, :order [:type :expected :actual :message :error = * radius cos angle sin polar->cartesian :pass :fail not within-tolerance? - xo x yo y wheel.math.geometry/??polar->cartesian :ns :name :file :end-column :column :line :end-line :arglists :doc :test wheel.math.geometry ??polar->cartesian == degrees->radians degrees / wheel.math.number/pi pi wheel.math.geometry/??degrees->radians ??degrees->radians radians->degrees radians wheel.math.geometry/??radians->degrees ??radians->degrees]}, :doc nil}