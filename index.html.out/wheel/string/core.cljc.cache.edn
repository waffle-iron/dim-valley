{:rename-macros {}, :renames {}, :use-macros {are cljs.test, is cljs.test, deftest cljs.test}, :excludes #{}, :name wheel.string.core, :imports nil, :requires {clojure.string clojure.string, cljs.test cljs.test}, :uses nil, :defs {no-space {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/168p/9txbbm/index.html.out/wheel/string/core.cljc", :line 7, :column 7, :end-line 7, :end-column 15, :arglists (quote ([s]))}, :name wheel.string.core/no-space, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/168p/9txbbm/index.html.out/wheel/string/core.cljc", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, ??no-space {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/168p/9txbbm/index.html.out/wheel/string/core.cljc", :line 15, :column 10, :end-line 15, :end-column 20}, :name wheel.string.core/??no-space, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/168p/9txbbm/index.html.out/wheel/string/core.cljc", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 15, :end-line 15, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}}, :require-macros {cljs.test cljs.test}, :cljs.analyzer/constants {:seen #{??no-space no-space = :ns wheel.string.core/??no-space :name :file :end-column wheel.string.core :type :column :fail :line not :expected :end-line :error :pass :arglists :actual :doc :test :message}, :order [:type :expected :actual :message :error = no-space :pass :fail not wheel.string.core/??no-space :ns :name :file :end-column :column :line :end-line :arglists :doc :test wheel.string.core ??no-space]}, :doc nil}