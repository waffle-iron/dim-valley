{:rename-macros {}, :renames {}, :use-macros {is cljs.test, deftest cljs.test}, :excludes #{}, :name wheel.address.hoplon, :imports nil, :requires {h hoplon.core, hoplon.core hoplon.core, wheel.dom.traversal wheel.dom.traversal, cljs.test cljs.test}, :uses nil, :defs {simple {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1hfv/9txbbm/index.html.out/wheel/address/hoplon.cljs", :line 7, :column 7, :end-line 7, :end-column 13, :arglists (quote ([a])), :doc "The simplest address element that could possibly work"}, :name wheel.address.hoplon/simple, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1hfv/9txbbm/index.html.out/wheel/address/hoplon.cljs", :end-column 13, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "The simplest address element that could possibly work"}, simple? {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1hfv/9txbbm/index.html.out/wheel/address/hoplon.cljs", :line 14, :column 7, :end-line 14, :end-column 14, :arglists (quote ([el a]))}, :name wheel.address.hoplon/simple?, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1hfv/9txbbm/index.html.out/wheel/address/hoplon.cljs", :end-column 14, :method-params ([el a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([el a]))}, ??simple {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1hfv/9txbbm/index.html.out/wheel/address/hoplon.cljs", :line 19, :column 10, :end-line 19, :end-column 18}, :name wheel.address.hoplon/??simple, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1hfv/9txbbm/index.html.out/wheel/address/hoplon.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 19, :end-line 19, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}}, :require-macros {h hoplon.core, hoplon.core hoplon.core, cljs.test cljs.test}, :cljs.analyzer/constants {:seen #{= wheel.dom.traversal/is? a wheel.dom.traversal/text wheel.address.hoplon/??simple :ns el :name :file :end-column :type :column :fail :line not :class :expected :end-line :error :pass ??simple :arglists :actual wheel.address.hoplon :doc :test :message}, :order [:class :type :expected :actual :message :error wheel.dom.traversal/is? el :pass :fail not = a wheel.dom.traversal/text wheel.address.hoplon/??simple :ns :name :file :end-column :column :line :end-line :arglists :doc :test wheel.address.hoplon ??simple]}, :doc nil}