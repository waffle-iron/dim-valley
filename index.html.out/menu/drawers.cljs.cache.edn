{:rename-macros {}, :renames {}, :externs {jQuery {}, Object {animate {}}}, :use-macros {}, :excludes #{}, :name menu.drawers, :imports nil, :requires {h hoplon.core, hoplon.core hoplon.core, j javelin.core, javelin.core javelin.core, menu.config menu.config, animation.easings animation.easings}, :uses nil, :defs {drawers {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1hfv/aixfad/menu/drawers.cljs", :line 8, :column 7, :end-line 8, :end-column 14, :arglists (quote ([& children])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(children)], :arglists ([& children]), :arglists-meta (nil)}}, :name menu.drawers/drawers, :variadic true, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1hfv/aixfad/menu/drawers.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(children)], :arglists ([& children]), :arglists-meta (nil)}, :method-params [(children)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 0, :fn-var true, :arglists ([& children])}, drawer {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1hfv/aixfad/menu/drawers.cljs", :line 15, :column 7, :end-line 15, :end-column 13, :arglists (quote ([open? offset & children])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(open? offset children)], :arglists ([open? offset & children]), :arglists-meta (nil)}}, :name menu.drawers/drawer, :variadic true, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/1hfv/aixfad/menu/drawers.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(open? offset children)], :arglists ([open? offset & children]), :arglists-meta (nil)}, :method-params [(open? offset children)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists ([open? offset & children])}}, :require-macros {h hoplon.core, hoplon.core hoplon.core, j javelin.core, javelin.core javelin.core}, :cljs.analyzer/constants {:seen #{:transform :transition :top :width :css :z-index :class :position :ease-out-quart :left}, :order [:css :width :z-index :position :transition :transform :top :left :ease-out-quart :class]}, :doc nil}